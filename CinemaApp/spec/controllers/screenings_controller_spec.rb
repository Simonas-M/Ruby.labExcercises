require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ScreeningsController, type: :controller do
  fixtures :all
  # This should return the minimal set of attributes required to create a valid
  # Screening. As you add validations to Screening, be sure to
  # adjust the attributes here as well.
  let(:screening_params) {
    {
      time: Time.now,
      movie_id: Movie.first.id,
      screen_id: Screen.first.id
    }
  }

  let(:invalid_attributes) {
    {
      some: 'useless',
      hash: nil
    }
  }

  describe "GET #index" do
    it "returns a success response" do
      get :index, params: {}
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      screening = screenings(:se7en_screening)
      get :show, params: {id: screening.to_param}
      expect(response).to be_success
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {}
      expect(response).to be_success
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Screening" do
        expect {
          post :create, params: screening_params
        }.to change(Screening, :count).by(1)
      end

      it "redirects to the created screening" do
        post :create, params: screening_params
        expect(response).to redirect_to(Screening.last)
      end

      it 'redirects to new screening creation page when repertoire cant add' do
        allow(ScreeningHelper)
          .to receive(:overlaps?).and_return true
        expect(controller).to receive(:respond)
          .with(screenings_new_path, 'cannot add overlaping screening')
        post :create, params: screening_params
      end
    end

    context "with invalid params" do
      it "redirects to new screening creation page" do
        post :create, params: invalid_attributes
        expect(response).to redirect_to(screenings_new_url)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested screening" do
      expect {
        screening = screenings(:se7en_screening)
        delete :destroy, params: {id: screening.to_param}
      }.to change(Screening, :count).by(-1)
    end

    it 'redirects to screenings index when theres an error deleting' do
      allow_any_instance_of(Screening).to receive(:destroyed?).and_return false
      expect(controller).to receive(:respond)
        .with(screenings_url, 'An error occured, screening not deleted')
      screening = screenings(:se7en_screening)
      delete :destroy, params: {id: screening.to_param}
    end

    it "redirects to the screenings list" do
      screening = screenings(:se7en_screening)
      delete :destroy, params: {id: screening.to_param}
      expect(response).to redirect_to(screenings_url)
    end
  end

end
